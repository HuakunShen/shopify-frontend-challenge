{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["pmdbapi_key","window","Clipboard","document","navigator","textArea","selectText","range","selection","userAgent","match","createRange","selectNodeContents","getSelection","removeAllRanges","addRange","setSelectionRange","select","copy","text","createElement","value","body","appendChild","createTextArea","execCommand","removeChild","MovieCard","movie","className","src","Poster","alt","Title","Year","imdbID","App","useState","searchTerm","setSearchTerm","movies","setMovies","msg","setMsg","msgErr","setMsgErr","Map","nominated","setNominated","initLocalStorageLoaded","setInitLocalStorageLoaded","setMessage","err","time","delay","setTimeout","searchById","id","Promise","resolve","reject","fetch","then","res","json","result","Response","Error","error","loadFromIds","ids","promises","forEach","idx","a","push","shared_movies","all","results","set","catch","useEffect","location","pathname","urlParams","URLSearchParams","search","get","length","split","localStorage","getItem","setItem","Array","from","map","id_movie_pair","join","Search","onClick","e","id_arr","share_link","origin","toString","htmlFor","type","placeholder","onChange","target","role","disabled","has","size","nominateOnCLick","delete","removeOnClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.89d9ca93.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst pmdbapi_key = '1583369f';\nconst nominate_size = 5;\n\nwindow.Clipboard = (function (window, document, navigator) {\n  var textArea, copy;\n\n  function isOS() {\n    return navigator.userAgent.match(/ipad|iphone/i);\n  }\n\n  function createTextArea(text) {\n    textArea = document.createElement('textArea');\n    textArea.value = text;\n    document.body.appendChild(textArea);\n  }\n\n  function selectText() {\n    var range, selection;\n\n    if (isOS()) {\n      range = document.createRange();\n      range.selectNodeContents(textArea);\n      selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(range);\n      textArea.setSelectionRange(0, 999999);\n    } else {\n      textArea.select();\n    }\n  }\n\n  function copyToClipboard() {\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n\n  copy = function (text) {\n    createTextArea(text);\n    selectText();\n    copyToClipboard();\n  };\n\n  return {\n    copy: copy,\n  };\n})(window, document, navigator);\n\nconst MovieCard = ({ movie }) => {\n  return (\n    <div className='movie-info'>\n      <div className='row'>\n        <div className='col-lg-4'>\n          <img\n            className='movie-poster'\n            src={movie.Poster === 'N/A' ? 'not_available.png' : movie.Poster}\n            alt=''\n          />\n        </div>\n        <div className='col-lg-8'>\n          <p>\n            <strong>Title:</strong> {`${movie.Title}`}\n          </p>\n          <p>\n            <strong>Year:</strong> {`${movie.Year}`}\n          </p>\n          <p>\n            <strong>imdb ID:</strong> {`${movie.imdbID}`}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [movies, setMovies] = useState([]);\n  // const [nominateStatus, setNominateStatus] = useState([]);\n  const [msg, setMsg] = useState('');\n  const [msgErr, setMsgErr] = useState(false);\n  const [nominated, setNominated] = useState(new Map());\n  const [initLocalStorageLoaded, setInitLocalStorageLoaded] = useState(false);\n\n  // message banner helper function\n  const setMessage = (msg, err, time) => {\n    const delay = time || 3000;\n    setMsg(msg);\n    setMsgErr(err);\n    setTimeout(() => {\n      setMsg('');\n    }, delay);\n  };\n\n  // ============================================= helpers for loading movie info from api =============================================\n  const searchByTitle = () => {\n    return new Promise((resolve, reject) => {\n      fetch(`https://www.omdbapi.com/?s=${searchTerm}&apikey=${pmdbapi_key}`)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            if (result.Response === 'True') {\n              resolve(result.Search);\n            } else {\n              reject(result.Error);\n            }\n          },\n          (error) => {\n            reject(error);\n          }\n        );\n    });\n  };\n\n  const searchById = (id) => {\n    return new Promise((resolve, reject) => {\n      fetch(`https://www.omdbapi.com/?i=${id}&apikey=${pmdbapi_key}`)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            if (result.Response === 'True') {\n              resolve(result);\n            } else {\n              reject(result.Error);\n            }\n          },\n          (error) => {\n            reject(error);\n          }\n        );\n    });\n  };\n\n  const loadFromIds = (ids) => {\n    const promises = [];\n    ids.forEach(async (id, idx) => {\n      if (idx >= nominate_size) {\n        setMessage(\n          `Error: Your share line contains more than ${nominate_size} movies, only 5 will be loaded`,\n          true,\n          5000\n        );\n      } else {\n        promises.push(searchById(id));\n      }\n    });\n    const shared_movies = new Map();\n    Promise.all(promises)\n      .then((results) => {\n        results.forEach((movie) => {\n          shared_movies.set(movie.imdbID, movie);\n        });\n        setNominated(shared_movies);\n      })\n      .catch((err) => {\n        setMessage(`Error: Got error while loading shared movies. ${err}`);\n      });\n  };\n\n  // ======================================== on vairable change and component init ========================================\n  useEffect(() => {\n    // process share link\n    if (window.location.pathname === '/share') {\n      const urlParams = new URLSearchParams(window.location.search);\n      const ids_str = urlParams.get('ids');\n      if (ids_str.length === 0) {\n        setMessage('Error: Share Link has no content', true, 5000);\n      }\n      const ids = urlParams.get('ids').split(',');\n      // load the movies\n      loadFromIds(ids);\n    } else if (localStorage.getItem('movie_ids')) {\n      const ids = localStorage.getItem('movie_ids').split(',');\n      loadFromIds(ids);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // whenever nomination list changes, save a copy of their ids to localStorage.\n  useEffect(() => {\n    if (initLocalStorageLoaded) {\n      localStorage.setItem(\n        'movie_ids',\n        Array.from(nominated)\n          .map((id_movie_pair, idx) => id_movie_pair[0])\n          .join(',')\n      );\n    } else {\n      setInitLocalStorageLoaded(true);\n    }\n  }, [nominated, initLocalStorageLoaded]);\n\n  // When input (searchTerm) changes, do a search with AP\n  useEffect(() => {\n    if (searchTerm === '') {\n      setMovies([]);\n    } else {\n      searchByTitle()\n        .then((result) => {\n          setMovies(result);\n        })\n        .catch((err) => {\n          setMessage(err, true);\n          setMovies([]);\n        });\n    }\n    // eslint-disable-next-line\n  }, [searchTerm]);\n\n  // ============================================= onClick events =============================================\n  const nominateOnCLick = (idx, movie) => {\n    if (nominated.has(movie.imdbID)) {\n      setMessage(\n        \"Error: Invalid Click on Nominate Button (Shouldnn't be able to click)\",\n        true\n      );\n    } else {\n      if (nominated.size >= nominate_size) {\n        setMessage(\n          `You reach the max nomination limit: ${nominate_size}`,\n          true\n        );\n      } else {\n        const copy = new Map(nominated);\n        copy.set(movie.imdbID, movie);\n        setNominated(copy);\n      }\n    }\n  };\n\n  const removeOnClick = (movie) => {\n    const copy = new Map(nominated);\n    copy.delete(movie.imdbID);\n    setNominated(copy);\n  };\n\n  const shareOnClick = (e) => {\n    const id_arr = Array.from(nominated).map((id_movie_pair, idx) => {\n      return id_movie_pair[0];\n    });\n    if (id_arr.length === 0) {\n      setMessage('Nothing to Share', true);\n      return;\n    }\n    const urlParams = new URLSearchParams();\n    urlParams.set('ids', id_arr);\n    const share_link = `${\n      window.location.origin\n    }/share?${urlParams.toString()}`;\n    window.Clipboard.copy(share_link);\n    setMessage(\n      `Your share link is generated and saved to your clipboard: ${share_link}`,\n      false,\n      10000\n    );\n  };\n\n  return (\n    <div className='App'>\n      <div className='container pt-5'>\n        <h2 id='title'>The Shoppies</h2>\n        <i className='far fa-share-square' onClick={shareOnClick}></i>\n        <div className='card'>\n          <div className='card-body'>\n            <label htmlFor='search-box'>Movie Title</label>\n            <div className='input-group'>\n              <div className='input-group-prepend'>\n                <button className='btn btn-outline-secondary'>\n                  <i className='fas fa-search'></i>\n                </button>\n              </div>\n\n              <input\n                id='search-box'\n                type='text'\n                value={searchTerm}\n                className='form-control'\n                placeholder='Search'\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n        {msg ? (\n          <div\n            className={`alert alert-${\n              msgErr ? 'danger' : 'primary'\n            } mt-3 sticky-top`}\n            role='alert'\n          >\n            {msg}\n          </div>\n        ) : null}\n\n        <div className='row mt-3'>\n          <div className='col-md-6'>\n            <div className='card'>\n              <div id='movie-list' className='card-body'>\n                <h3>Results For {searchTerm ? `\"${searchTerm}\"` : '...'}</h3>\n                <ul className='list-group'>\n                  {movies.map((movie, idx) => {\n                    return (\n                      <li\n                        key={idx}\n                        className='list-group-item d-flex justify-content-between align-items-center'\n                      >\n                        {<MovieCard movie={movie} />}\n                        <button\n                          className='btn btn-primary btn-sm'\n                          disabled={nominated.has(movie.imdbID) ? true : false}\n                          onClick={() => nominateOnCLick(idx, movie)}\n                        >\n                          Nominate\n                        </button>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div className='col-md-6'>\n            <div className='card'>\n              <div className='card-body'>\n                <h3>Nominations</h3>\n                <ul className='list-group'>\n                  {Array.from(nominated).map((id_movie_pair, idx) => {\n                    const movie = id_movie_pair[1];\n                    return (\n                      <li\n                        key={idx}\n                        className='list-group-item d-flex justify-content-between align-items-center'\n                      >\n                        {<MovieCard movie={movie} />}\n                        <button\n                          className='btn btn-danger btn-sm'\n                          disabled={false}\n                          onClick={() => removeOnClick(movie)}\n                        >\n                          Remove\n                        </button>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}